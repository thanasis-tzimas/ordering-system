/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package orderingsystem;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author thanasis
 */
public class App extends javax.swing.JFrame {

    /**
     * Creates new form App
     */
    public App() {
        // Render application
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NewOrderWindow = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        NewOrderTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        AddProductToTableButton = new javax.swing.JButton();
        CancelAddOrder = new javax.swing.JButton();
        ProceedOrderButton = new javax.swing.JButton();
        CategoriesComboBox = new javax.swing.JComboBox<>();
        ProductComboBox = new javax.swing.JComboBox<>();
        AmountSpinner = new javax.swing.JSpinner();
        Dashboard = new javax.swing.JTabbedPane();
        ActiveOrdersScrollPane = new javax.swing.JScrollPane();
        ActiveOrdersTable = new javax.swing.JTable();
        UtilityMenu = new javax.swing.JMenuBar();
        NewMenu = new javax.swing.JMenu();
        NewOrderButton = new javax.swing.JMenuItem();

        NewOrderWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        NewOrderWindow.setTitle("Add a new order");

        NewOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Cost", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(NewOrderTable);

        AddProductToTableButton.setText("Add Product");
        AddProductToTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddProductToTableButtonActionPerformed(evt);
            }
        });

        CancelAddOrder.setText("Cancel");
        CancelAddOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelAddOrderActionPerformed(evt);
            }
        });

        ProceedOrderButton.setText("Proceed");
        ProceedOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProceedOrderButtonActionPerformed(evt);
            }
        });

        CategoriesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CategoriesComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CategoriesComboBoxItemStateChanged(evt);
            }
        });

        ProductComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        AmountSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ProceedOrderButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CancelAddOrder)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 66, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(AddProductToTableButton)
                                    .addComponent(CategoriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(64, 64, 64))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ProductComboBox, 0, 108, Short.MAX_VALUE)
                                    .addComponent(AmountSpinner))
                                .addContainerGap())))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(CategoriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ProductComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AmountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addComponent(AddProductToTableButton)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CancelAddOrder)
                    .addComponent(ProceedOrderButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout NewOrderWindowLayout = new javax.swing.GroupLayout(NewOrderWindow.getContentPane());
        NewOrderWindow.getContentPane().setLayout(NewOrderWindowLayout);
        NewOrderWindowLayout.setHorizontalGroup(
            NewOrderWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NewOrderWindowLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        NewOrderWindowLayout.setVerticalGroup(
            NewOrderWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ordering System I");

        ActiveOrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        ActiveOrdersScrollPane.setViewportView(ActiveOrdersTable);

        Dashboard.addTab("Active Orders", ActiveOrdersScrollPane);

        NewMenu.setText("New");

        NewOrderButton.setText("New order");
        NewOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewOrderButtonActionPerformed(evt);
            }
        });
        NewMenu.add(NewOrderButton);

        UtilityMenu.add(NewMenu);

        setJMenuBar(UtilityMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Dashboard, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Dashboard, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewOrderButtonActionPerformed
        NewOrderWindow.pack();
        NewOrderWindow.setVisible(true);
        // Get categories
        try {
            CategoriesComboBox.removeAllItems();
            Statement st = database.getConn().createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM categories;");
            while(rs.next()) {
                CategoriesComboBox.addItem(rs.getString(1));
            }
            CategoriesComboBox.setSelectedIndex(0);
            ProductComboBox.removeAllItems();
            // Capitalize first letter
            String s = CategoriesComboBox.getSelectedItem()
                    .toString()
                    .substring(0, 1)
                    .toUpperCase() + CategoriesComboBox.getSelectedItem()
                            .toString()
                            .substring(1);
            rs = st.executeQuery("SELECT product_name FROM product"
                    + " WHERE category_name = '"+s+"';");
            while(rs.next()) {
                ProductComboBox.addItem(rs.getString(1));
            }
            ProductComboBox.setSelectedIndex(0);
            rs.close();
            st.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_NewOrderButtonActionPerformed

    private void ProceedOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProceedOrderButtonActionPerformed
        
    }//GEN-LAST:event_ProceedOrderButtonActionPerformed

    private void CancelAddOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelAddOrderActionPerformed
        try {
            database.closeConnection();
        } catch (SQLException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
        NewOrderWindow.dispose();
    }//GEN-LAST:event_CancelAddOrderActionPerformed

    private void CategoriesComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CategoriesComboBoxItemStateChanged
        try {
            if(CategoriesComboBox.getSelectedItem() != null) {
                String category = CategoriesComboBox.getSelectedItem()
                        .toString()
                        .substring(0, 1)
                        .toUpperCase()
                        + CategoriesComboBox.getSelectedItem()
                                .toString()
                                .substring(1);
                Statement st = database.getConn().createStatement();
                ResultSet rs = st.executeQuery("SELECT product_name FROM product"
                        + " WHERE category_name = '"+ category +"';");
                ProductComboBox.removeAllItems();
                while(rs.next()) {
                    ProductComboBox.addItem(rs.getString(1));
                }
                ProductComboBox.setSelectedIndex(0);
                st.close();
                rs.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_CategoriesComboBoxItemStateChanged

    private void AddProductToTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddProductToTableButtonActionPerformed
        try {
            Statement st = database.getConn().createStatement();
            ResultSet rs = st.executeQuery("SELECT product_cost"
                    + " FROM product WHERE product_name = '"+ 
                    ProductComboBox.getSelectedItem().toString()
                    .substring(0, 1)
                    .toUpperCase() + ProductComboBox.getSelectedItem()
                            .toString()
                            .substring(1)
                    +"';");
            String productCost = "";
            while(rs.next()) {
                productCost = rs.getString(1);
            }
            DefaultTableModel model = (DefaultTableModel)NewOrderTable.getModel();
            model.insertRow(0, new Object[] {
                ProductComboBox.getSelectedItem().toString(),
                productCost,
                AmountSpinner.getValue().toString()
            });
            st.close();
            rs.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_AddProductToTableButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException, SQLException {
        /* Initialise server connection*/
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        database = new LocalPSQLDatabase("dblabs.iee.ihu.gr", "5432",
                "it185287", "it185287", "AhoyScientist!0");
        database.establishConnection();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new App().setVisible(true);
        });
    }
    
    static LocalPSQLDatabase database;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ActiveOrdersScrollPane;
    private javax.swing.JTable ActiveOrdersTable;
    private javax.swing.JButton AddProductToTableButton;
    private javax.swing.JSpinner AmountSpinner;
    private javax.swing.JButton CancelAddOrder;
    private javax.swing.JComboBox<String> CategoriesComboBox;
    private javax.swing.JTabbedPane Dashboard;
    private javax.swing.JMenu NewMenu;
    private javax.swing.JMenuItem NewOrderButton;
    private javax.swing.JTable NewOrderTable;
    private javax.swing.JFrame NewOrderWindow;
    private javax.swing.JButton ProceedOrderButton;
    private javax.swing.JComboBox<String> ProductComboBox;
    private javax.swing.JMenuBar UtilityMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
